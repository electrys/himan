#
# SConscript for himan-bin

import os
import platform

OS_NAME = platform.linux_distribution()[0]
OS_VERSION = float('.'.join(platform.linux_distribution()[1].split('.')[:2]))

IS_RHEL = False
IS_SLES = False

if OS_NAME == "Red Hat Enterprise Linux Server" or OS_NAME == "CentOS Linux":
	IS_RHEL=True
elif OS_NAME == "SUSE Linux Enterprise Server ":
        IS_SLES=True

AddOption(
    '--debug-build',
    dest='debug-build',
    action='store_true',
    help='debug build',
    default=False)

AddOption(
    '--no-cuda-build',
    dest='no-cuda-build',
    action='store_true',
    help='no cuda build',
    default=False)

env = Environment()

# Check build

NOCUDA = GetOption('no-cuda-build')
DEBUG = GetOption('debug-build')
RELEASE = (not DEBUG)

# Workspace

#workspace = os.getcwd() + "/../"
# rpm builds:
workspace = "/home/dev/weto/partio/himan"

# cuda toolkit path

if not NOCUDA:
	cuda_toolkit_path = '/usr/local/cuda-8.0'

	if os.environ.get('CUDA_TOOLKIT_PATH') is None:
        	print "Environment variable CUDA_TOOLKIT_PATH not set, assuming " + cuda_toolkit_path
	else:
        	cuda_toolkit_path = os.environ['CUDA_TOOLKIT_PATH']

have_cuda = False

if not NOCUDA and os.path.isfile(cuda_toolkit_path + '/lib64/libcudart_static.a'):
	have_cuda = True

env['CC'] = 'gcc'
env['CXX'] = 'g++'

if os.environ.get('CC') != None:
        env['CC'] = os.environ.get('CC')

if os.environ.get('CXX') != None:
        env['CXX'] = os.environ.get('CXX')

env["ENV"].update(x for x in os.environ.items() if x[0].startswith("CCC_"))

# Includes

includes = []

includes.append('./include')

includes.append(workspace + '/himan-lib/include')
includes.append(workspace + '/himan-plugins/include')
includes.append('/usr/include/smartmet/newbase')
includes.append('/usr/include/gdal')

if os.environ.get('ORACLE_HOME') is None:
	includes.append('/usr/include/oracle')
else:
	includes.append(os.environ.get('ORACLE_HOME') + '/rdbms/public')

if have_cuda:
	includes.append(cuda_toolkit_path + '/include')

if not IS_RHEL:
	includes.append('/opt/gdal/1.11.2/include/')

env.Append(CPPPATH = includes)

# Library paths

library_paths = []

if RELEASE:
	library_paths.append(workspace + '/himan-lib/build/release')

elif DEBUG:
	library_paths.append(workspace + '/himan-lib/build/debug')

library_paths.append(workspace + '/fmidb/lib')
library_paths.append('/usr/lib64')

if os.environ.get('ORACLE_HOME') is None:
	library_paths.append('/usr/lib64/oracle/')
else:
	 library_paths.append(os.environ.get('ORACLE_HOME') + '/lib')

env.Append(LIBPATH = library_paths)

# Libraries

libraries = []

# libraries.append('smartmet_newbase')

if have_cuda:
	env.Append(LIBS=env.File(cuda_toolkit_path + '/lib64/libcudart_static.a'))

libraries.append('fmigrib')
libraries.append('fmidb')
libraries.append('jasper')
libraries.append('clntsh')
libraries.append('lua')
libraries.append('luabind')
libraries.append('odbc')

if IS_RHEL:
	libraries.append('eccodes')
else:
	libraries.append('grib_api')

env.Append(LIBS = libraries)

# CFLAGS

# "Normal" flags

cflags_normal = []
cflags_normal.append('-Wall')
cflags_normal.append('-W')
cflags_normal.append('-Wno-unused-parameter')
cflags_normal.append('-Werror')
cflags_normal.append('-Wno-narrowing')

# Extra flags

cflags_extra = []
cflags_extra.append('-Wpointer-arith')
cflags_extra.append('-Wcast-qual')
cflags_extra.append('-Wcast-align')
cflags_extra.append('-Wwrite-strings')
cflags_extra.append('-Wconversion')
cflags_extra.append('-Winline')
cflags_extra.append('-Wnon-virtual-dtor')
cflags_extra.append('-Wno-pmf-conversions')
cflags_extra.append('-Wsign-promo')
cflags_extra.append('-Wchar-subscripts')
cflags_extra.append('-Wold-style-cast')

# Difficult flags

cflags_difficult = []
cflags_difficult.append('-pedantic')
cflags_difficult.append('-Weffc++')
cflags_difficult.append('-Wredundant-decls')
cflags_difficult.append('-Wshadow')
cflags_difficult.append('-Woverloaded-virtual')
cflags_difficult.append('-Wunreachable-code')
cflags_difficult.append('-Wctor-dtor-privacy')

# Default flags (common for release/debug)

cflags = []
cflags.append('-fPIC')

if IS_RHEL and OS_VERSION >= 7.0:
	cflags.append('-std=c++11')
else:
	cflags.append('-std=c++0x')

env.Append(CCFLAGS = cflags)
env.Append(CCFLAGS = cflags_normal)

# Linker flags

env.Append(LINKFLAGS = ['-rdynamic'])

# Defines

env.Append(CPPDEFINES=['UNIX'])
env.Append(NVCCDEFINES=['HAVE_CUDA'])

if have_cuda:
	env.Append(CPPDEFINES=['HAVE_CUDA'])

# Cuda

env.Append(NVCCFLAGS = ['-m64'])
env.Append(NVCCFLAGS = ['-Xcompiler','-fPIC'])
env.Append(NVCCFLAGS = ['-Xcompiler','-Wall']) # This producers lots of warnings from cuda system libraries
env.Append(NVCCFLAGS = ['-gencode=arch=compute_35,code=sm_35'])
env.Append(NVCCFLAGS = ['-gencode=arch=compute_52,code=sm_52'])

if not IS_RHEL or (IS_RHEL and OS_VERSION >= 7.0):
	env.Append(NVCCFLAGS = ['-std=c++11'])

env.Append(NVCCPATH = ['./include'])
env.Append(NVCCPATH = [workspace + '/himan-lib/include']) # timer
env.Append(NVCCPATH = ['/usr/include/smartmet/newbase']) 

build_dir = ""

env.Append(NOCUDA = NOCUDA)

if RELEASE:
	env.Append(CCFLAGS = ['-O2'])
	env.Append(CPPDEFINES = ['NDEBUG'])
	build_dir = 'build/release'

	# Cuda
	env.Append(NVCCFLAGS = ['-O2'])
	env.Append(NVCCDEFINES = ['NDEBUG'])

if DEBUG:
	env.Append(CCFLAGS = ['-O0'])
	env.Append(CCFLAGS = [ '-g' ])

	env.Append(CCFLAGS = cflags_extra)
	#env.Append(CCFLAGS = cflags_difficult)
	env.Append(CPPDEFINES = ['DEBUG'])

	# Cuda
	env.Append(NVCCFLAGS = ['-O0','-g','-G', '-lineinfo'])
	env.Append(NVCCDEFINES = ['DEBUG'])

	build_dir = 'build/debug'

#
# https://bitbucket.org/scons/scons/wiki/PhonyTargets
#
def PhonyTargets(env = None, **kw):
	if not env: env = DefaultEnvironment()
	for target,action in kw.items():
		env.AlwaysBuild(env.Alias(target, [], action))

PhonyTargets(CPPCHECK = 'cppcheck --std=c++11 --enable=all -I ./include -I ../himan-lib/include ./')
PhonyTargets(SCANBUILD = 'scan-build make debug')

SConscript('SConscript', exports = ['env'], variant_dir=build_dir, duplicate=0)
Clean('.', build_dir)
