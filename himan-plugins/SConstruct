#
# SConscript for himan-bin

import os

AddOption(
    '--debug-build',
    dest='debug-build',
    action='store_true',
    help='debug build',
    default=False)

env = Environment()

# Check build

DEBUG = GetOption('debug-build')
RELEASE = (not DEBUG)

# Workspace

workspace = os.environ['HOME'] + "/workspace"
if os.environ['HOME'] is "/var/lib/jenkins":
	workspace = os.environ['HOME'] + "/jobs/himan/workspace"
# cuda toolkit path

cuda_toolkit_path = '/opt/cuda'

if os.environ.get('CUDA_TOOLKIT_PATH') is None:
        print "Environment variable CUDA_TOOLKIT_PATH not set, assuming " + cuda_toolkit_path
else:
        cuda_toolkit_path = os.environ['CUDA_TOOLKIT_PATH']

have_cuda = False

if os.path.isfile(cuda_toolkit_path + '/lib64/libcudart.so'):
	have_cuda = True

env['CC'] = 'gcc'
env['CXX'] = 'g++'

if os.environ.get('CC') != None:
        env['CC'] = os.environ.get('CC')

if os.environ.get('CXX') != None:
        env['CXX'] = os.environ.get('CXX')

# Includes

includes = []

includes.append('./include')
includes.append(workspace + '/himan-lib/include')
includes.append(workspace + '/himan-plugins/include')
#includes.append(workspace + '/trunk/newbase/include')
includes.append('/usr/include/smartmet/newbase')
includes.append(workspace + '/fmidb/include')
includes.append(workspace + '/fmigrib/include')
includes.append('/usr/lib/grib_api/include')

if os.environ.get('ORACLE_HOME') is None:
	includes.append('/usr/include/oracle')
else:
	includes.append(os.environ.get('ORACLE_HOME') + '/rdbms/public')

if have_cuda:
	includes.append(cuda_toolkit_path + '/include')

env.Append(CPPPATH = includes)

# Library paths

library_paths = []

library_paths.append(workspace + '/himan-lib/build/debug')
library_paths.append(workspace + '/fmidb/lib')
library_paths.append(workspace + '/fmigrib/lib')
library_paths.append('/usr/lib64')

if os.environ.get('ORACLE_HOME') is None:
	library_paths.append('/usr/lib64/oracle/')
else:
	 library_paths.append(os.environ.get('ORACLE_HOME') + '/lib')

if have_cuda:
	library_paths.append(cuda_toolkit_path + '/lib64')

env.Append(LIBPATH = library_paths)

# Libraries

libraries = []

libraries.append('smartmet_newbase')
libraries.append('fmigrib')
libraries.append('fmidb')
libraries.append('jasper')
libraries.append('clntsh')
libraries.append('boost_filesystem')

if have_cuda:
	libraries.append('cudart')

env.Append(LIBS = libraries)

libgrib_api = env.File('/usr/lib64/libgrib_api.a')

env.Append(LIBS=libgrib_api)

# CFLAGS

# "Normal" flags

cflags_normal = []
cflags_normal.append('-Wall')
cflags_normal.append('-W')
cflags_normal.append('-Wno-unused-parameter')
cflags_normal.append('-Werror')

# Extra flags

cflags_extra = []
cflags_extra.append('-Wpointer-arith')
cflags_extra.append('-Wcast-qual')
cflags_extra.append('-Wcast-align')
cflags_extra.append('-Wwrite-strings')
cflags_extra.append('-Wconversion')
cflags_extra.append('-Winline')
cflags_extra.append('-Wnon-virtual-dtor')
cflags_extra.append('-Wno-pmf-conversions')
cflags_extra.append('-Wsign-promo')
cflags_extra.append('-Wchar-subscripts')
cflags_extra.append('-Wold-style-cast')

# Difficult flags

cflags_difficult = []
cflags_difficult.append('-pedantic')
cflags_difficult.append('-Weffc++')
cflags_difficult.append('-Wredundant-decls')
cflags_difficult.append('-Wshadow')
cflags_difficult.append('-Woverloaded-virtual')
cflags_difficult.append('-Wunreachable-code')
cflags_difficult.append('-Wctor-dtor-privacy')

# Default flags (common for release/debug)

cflags = []
cflags.append('-fPIC')
cflags.append('-std=c++0x')

env.Append(CCFLAGS = cflags)
env.Append(CCFLAGS = cflags_normal)

# Linker flags

env.Append(LINKFLAGS = ['-rdynamic'])

# Defines

env.Append(CPPDEFINES=['UNIX'])
env.Append(NVCCDEFINES=['HAVE_CUDA'])

if have_cuda:
	env.Append(CPPDEFINES=['HAVE_CUDA'])

# Cuda

env.Append(NVCCFLAGS = ['-m64'])
env.Append(NVCCFLAGS = ['-Xcompiler','-fPIC']) # these two go hand-in-hand (like -Wl,--export-dynamic)
env.Append(NVCCFLAGS = ['-Xcompiler','-Wall']) # This producers lots of warnings from cuda system libraries
env.Append(NVCCFLAGS = ['-arch=compute_20','-code=sm_20'])
env.Append(NVCCPATH = ['./include'])
env.Append(NVCCPATH = [workspace + '/himan-lib/include']) # timer

build_dir = ""

if RELEASE:
	env.Append(CCFLAGS = ['-O2'])
	env.Append(CPPDEFINES = ['NDEBUG'])
	build_dir = 'build/release'

	# Cuda
	env.Append(NVCCFLAGS = ['-O2'])
	env.Append(NVCCDEFINES = ['NDEBUG'])

if DEBUG:
	env.Append(CCFLAGS = ['-g','-O0'])
	env.Append(CCFLAGS = cflags_extra)
	#env.Append(CCFLAGS = cflags_difficult)
	env.Append(CPPDEFINES = ['DEBUG'])

	# Cuda
	env.Append(NVCCFLAGS = ['-O0','-g','-G'])
	env.Append(NVCCDEFINES = ['DEBUG'])

	build_dir = 'build/debug'

SConscript('SConscript', exports = ['env'], variant_dir=build_dir, duplicate=0)
Clean('.', build_dir)
