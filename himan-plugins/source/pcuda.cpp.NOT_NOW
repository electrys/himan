/*
 * pcuda.cpp
 *
 *  Created on: Dec 19, 2012
 *      Author: partio
 */

#include "logger_factory.h"
#include "pcuda.h"
#include <cuda_runtime_api.h>

using namespace std;
using namespace hilpee::plugin;

pcuda::pcuda()
{
	itsLogger = hilpee::logger_factory::Instance()->GetLog("cuda");
}

pcuda::~pcuda()
{}

void pcuda::Capabilities() const
{
	int devCount;
	cudaGetDeviceCount(&devCount);

	cout << "**********" << endl;
	cout << "There are " << devCount << " CUDA devices" << endl;

	// Iterate through devices
	for (int i = 0; i < devCount; ++i)
	{
		// Get device properties
		cout << "CUDA Device #" << i << endl;

		cudaDeviceProp devProp;
		cudaGetDeviceProperties(&devProp, i);

		cout << "Major revision number:         " << devProp.major << endl
		     << "Minor revision number:         " << devProp.minor << endl
		     << "Name:                          " << devProp.name << endl
		     << "Total global memory:           " << devProp.totalGlobalMem << endl
		     << "Total shared memory per block: " << devProp.sharedMemPerBlock << endl
		     << "Total registers per block:     " << devProp.regsPerBlock << endl
		     << "Warp size:                     " << devProp.warpSize << endl
		     << "Maximum memory pitch:          " << devProp.memPitch << endl
		     << "Maximum threads per block:     " << devProp.maxThreadsPerBlock << endl;

		for (int i = 0; i < 3; ++i)
		{
			cout << "Maximum dimension " << i << " of block:  " << devProp.maxThreadsDim[i] << endl;
		}

		for (int i = 0; i < 3; ++i)
		{
			cout << "Maximum dimension " << i << " of grid:   " << devProp.maxGridSize[i] << endl;
		}

		cout << "Clock rate:                    " << devProp.clockRate << endl
		     << "Total constant memory:         " << devProp.totalConstMem << endl
		     << "Texture alignment:             " << devProp.textureAlignment << endl
		     << "Concurrent copy and execution: " << (devProp.deviceOverlap ? "Yes" : "No") << endl
		     << "Number of multiprocessors:     " << devProp.multiProcessorCount << endl
		     << "Kernel execution timeout:      " << (devProp.kernelExecTimeoutEnabled ? "Yes" : "No") << endl;

	}

	cout << "**********" << endl;
}
