#
# SConstruct for himan-plugins

Import('env')
import os
import sys

# cuda toolkit path

cuda_toolkit_path = '/opt/cuda'

if os.environ.get('CUDA_TOOLKIT_PATH') is None:
        print "Environment variable CUDA_TOOLKIT_PATH not set, assuming " + cuda_toolkit_path
else:
        cuda_toolkit_path = os.environ['CUDA_TOOLKIT_PATH']

have_cuda = False

if os.path.isfile(cuda_toolkit_path + '/lib64/libcudart.so'):
	have_cuda = True

auxiliary_plugins = ['cache','fetcher','grib','neons','pcuda','querydata','writer']

compiled_plugins = ['icing', 'kindex', 'precipitation', 'seaicing', 'hybrid_pressure']

cuda_plugins = ['dewpoint', 'tk2tc','tpot','vvms', 'windvector', 'height']

if have_cuda:
	env.Tool('cuda')

else:
	compiled_plugins.extend(cuda_plugins)

for p in auxiliary_plugins:

	file = 'source/' + p + '.cpp'
	env.SharedLibrary(target = p, source = [file])

for p in compiled_plugins:

	file = 'source/' + p + '.cpp'
	base = 'source/compiled_plugin_base.cpp'

	files = [file, base]

	env.SharedLibrary(target = p, source = files)

if have_cuda:
	for p in cuda_plugins:

		file = 'source/' + p + '.cpp'
		base = 'source/compiled_plugin_base.cpp'
		cufile = 'source/' + p + '_cuda.cu'
 
		files = [file, base, cufile]

		env.SharedLibrary(target = p, source = files)

