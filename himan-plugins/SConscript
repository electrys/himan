#
# SConstruct for himan-plugins

Import('env')
import os
import sys

# cuda toolkit path


NOCUDA = env['NOCUDA']

if not NOCUDA:
	cuda_toolkit_path = '/usr/local/cuda-7.5'

	if os.environ.get('CUDA_TOOLKIT_PATH') is None:
        	print "Environment variable CUDA_TOOLKIT_PATH not set, assuming " + cuda_toolkit_path
		os.environ['CUDA_TOOLKIT_PATH'] = cuda_toolkit_path
	else:
        	cuda_toolkit_path = os.environ['CUDA_TOOLKIT_PATH']

have_cuda = False

if not NOCUDA and os.path.isfile(cuda_toolkit_path + '/lib64/libcudart.so'):
	have_cuda = True

# List all auxiliary plugins

auxiliary_plugins = ['cache','csv','fetcher','grib','hitool','neons','querydata','writer','radon']

# List all compiled plugins that have only CPU implementation here

compiled_plugins = ['icing', 'split_sum', 'seaicing', 'hybrid_pressure', 'hybrid_height',
'cloud_code', 'ncl', 'weather_code_1', 'preform_pressure', 'preform_hybrid', 'density',
'precipitation_rate', 'absolute_humidity', 'roughness', 'weather_symbol',
'weather_code_2', 'gust', 'monin_obukhov', 'fog', 'qnh', 'luatool', 'turbulence',
'pot','tke','visibility','fractile','pop','probability']

# List all compiled plugins that have both CPU and GPU implementation here

cuda_plugins = ['dewpoint', 'tpot', 'windvector', 'vvms', 'relative_humidity', 'transformer', 'stability', 'cape', 'unstagger']

if have_cuda:
	env.Tool('cuda')

else:
	compiled_plugins.extend(cuda_plugins)

for p in auxiliary_plugins:

	file = 'source/' + p + '.cpp'

	if p == "fetcher" and have_cuda:
		interp = 'source/interpolate_cuda.cu'
		file = [file, interp]

	env.SharedLibrary(target = p, source = [file])

for p in compiled_plugins:

	file = 'source/' + p + '.cpp'
	base = 'source/compiled_plugin_base.cpp'

	files = [file, base]

	env.SharedLibrary(target = p, source = files)

if have_cuda:
	for p in cuda_plugins:
		objects = []


		base = 'source/compiled_plugin_base.cpp'
		obj='obj/'+ base.replace(".cpp","")
		objects += env.SharedObject(obj, base)

		file="source/" + p + ".cpp"

		obj='obj/'+ file.replace(".cpp","")
		objects += env.SharedObject(obj, file)

		cufile="source/" + p + ".cu"	
                obj='obj/cu_'+ cufile.replace(".cu","")
                objects += env.SharedObject(obj, cufile)

		env.SharedLibrary(target = p, source = objects)
