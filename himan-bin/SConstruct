#
# SConscript for himan-bin

import os
import platform

OS_NAME = platform.linux_distribution()[0]
OS_VERSION = float('.'.join(platform.linux_distribution()[1].split('.')[:2]))

IS_RHEL = False
IS_SLES = False

if OS_NAME == "Red Hat Enterprise Linux Server" or OS_NAME == "CentOS Linux":
	IS_RHEL=True
elif OS_NAME == "SUSE Linux Enterprise Server ":
	IS_SLES=True

AddOption(
    '--debug-build',
    dest='debug-build',
    action='store_true',
    help='debug build',
    default=False)

AddOption(
    '--no-cuda-build',
    dest='no-cuda-build',
    action='store_true',
    help='no cuda build',
    default=False)

env = Environment(ENV = {'PATH' : os.environ['PATH']})

# Get color output from gcc / clang
try:
    env['ENV']['TERM'] = os.environ['TERM']
except KeyError:
    pass

# Check build

NOCUDA = GetOption('no-cuda-build')
DEBUG = GetOption('debug-build')
RELEASE = (not DEBUG)

# Workspace

workspace = os.getcwd() + "/../"
#workspace = '/home/dev/weto/workspace/himan'

# cuda toolkit path

if not NOCUDA:
	cuda_toolkit_path = '/usr/local/cuda'

	if os.environ.get('CUDA_TOOLKIT_PATH') is not None:
		cuda_toolkit_path = os.environ['CUDA_TOOLKIT_PATH']

have_cuda = False

if not NOCUDA and os.path.isfile(cuda_toolkit_path + '/lib64/libcudart.so'):
	have_cuda = True

# Assign compilers

env['CC'] = 'gcc'
env['CXX'] = 'g++'

if os.environ.get('CC') != None:
        env['CC'] = os.environ.get('CC')

if os.environ.get('CXX') != None:
        env['CXX'] = os.environ.get('CXX')

# Required for scan-build
env["ENV"].update(x for x in os.environ.items() if x[0].startswith("CCC_"))

# Includes

includes = []

includes.append(workspace + '/himan-lib/include')
includes.append(workspace + '/himan-plugins/include')

if have_cuda:
	includes.append(cuda_toolkit_path + '/include')

env.Append(CPPPATH = includes)

# Library paths

librarypaths = []

if RELEASE:
	librarypaths.append(workspace + '/himan-lib/build/release')
else:
	librarypaths.append(workspace + '/himan-lib/build/debug')

librarypaths.append('/usr/lib64')

if have_cuda:
	librarypaths.append(cuda_toolkit_path + '/lib64')

env.Append(LIBPATH = librarypaths)

# Libraries

boost_mt = ""

if IS_SLES:
	boost_mt = "-mt"

libraries = []

libraries.append('himan')
libraries.append('rt')
libraries.append('jasper')
libraries.append('odbc')
libraries.append('pqxx')
libraries.append('boost_program_options' + boost_mt)
libraries.append('boost_system' + boost_mt)

env.Append(LIBS = libraries)

if have_cuda:
        env.Append(LIBS=env.File(cuda_toolkit_path + '/lib64/libcudart_static.a'))

env.Append(LIBS = [ 'z', 'bz2' ]) # for newbase
env.Append(LIBS = [ 'dl', 'rt' ]) # for cudart_static

# CFLAGS

# "Normal" flags

cflags_normal = []
cflags_normal.append('-Wall')
cflags_normal.append('-W')
cflags_normal.append('-Wno-unused-parameter')
cflags_normal.append('-Werror')
cflags_normal.append('-Wpointer-arith')
cflags_normal.append('-Wcast-qual')
cflags_normal.append('-Wcast-align')

# Extra flags

cflags_extra = []
cflags_extra.append('-Wwrite-strings')
cflags_extra.append('-Wconversion')
# cflags_extra.append('-Winline')
cflags_extra.append('-Wnon-virtual-dtor')
cflags_extra.append('-Wsign-promo')
cflags_extra.append('-Wchar-subscripts')
cflags_extra.append('-Wold-style-cast')
cflags_extra.append('-Wshadow')
cflags_extra.append('-Wunreachable-code')

if env['CXX'] == 'g++':
       cflags_extra.append('-Wno-pmf-conversions')
elif env['CXX'] == 'clang++':
       cflags_extra.append('-Wno-int-conversions')

# Difficult flags

cflags_difficult = []
cflags_difficult.append('-pedantic')
cflags_difficult.append('-Weffc++')
cflags_difficult.append('-Wredundant-decls')
cflags_difficult.append('-Woverloaded-virtual')
cflags_difficult.append('-Wctor-dtor-privacy')

# Default flags (common for release/debug)

cflags = []

if IS_RHEL and OS_VERSION >= 7.0:
	cflags.append('-std=c++11')
else:
	cflags.append('-std=c++0x')

cflags.append('-fPIC')
cflags.append('-fPIE')

env.Append(CCFLAGS = cflags)
env.Append(CCFLAGS = cflags_normal)
env.Append(CCFLAGS = cflags_extra)

# Linker flags

env.Append(LINKFLAGS = ['-rdynamic','-Wl,--warn-unresolved-symbols','-Wl,--as-needed' ,'-pthread', '-pie'])

# '-Wl,-rpath,.'

# Defines

env.Append(CPPDEFINES=['UNIX'])

if have_cuda:
	env.Append(CPPDEFINES=['HAVE_CUDA'])

build_dir = ""

if RELEASE:
	env.Append(CCFLAGS = ['-O2'])
	env.Append(CPPDEFINES = ['NDEBUG'])
	build_dir = "build/release"

if DEBUG:
	env.Append(CPPDEFINES = ['DEBUG'])
	env.Append(CCFLAGS = ['-O0'])
	env.Append(CCFLAGS = ['-ggdb', '-g3'])
#	env.Append(CCFLAGS = cflags_difficult)
	build_dir = "build/debug"

#
# https://bitbucket.org/scons/scons/wiki/PhonyTargets
#
def PhonyTargets(env = None, **kw):
	if not env: env = DefaultEnvironment()
	for target,action in kw.items():
		env.AlwaysBuild(env.Alias(target, [], action))

PhonyTargets(CPPCHECK = 'cppcheck --std=c++11 --enable=all -I ../himan-lib/include -I ../himan-plugins/include ./')

SConscript('SConscript', exports = ['env'], variant_dir=build_dir, duplicate=0)
Clean('.', build_dir)
